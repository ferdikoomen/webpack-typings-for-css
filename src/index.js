'use strict';

const os = require('os');
const fs = require('fs');
const path = require('path');
const camelCase = require('camelcase');

/**
 * The 'webpack-typings-for-css' loader writes out Typescript definition files for
 * each imported CSS/SCSS/LESS file. This loader works together with the 'css-loader',
 * the CSS loader provides the logic to load the CSS and create the CSS module definition,
 * this loader reads the exported CSS module identifiers and writes out the definition file.
 *
 * @param input The loaded content from the CSS loader
 */
module.exports = function (input) {

    if (this.cacheable) {
        this.cacheable();
    }

    // The output of the CSS loader will contains the exported CSS identifiers:
    //
    // exports.locals = {
    //     'my-button': '.styles__my-button__3uJig8mNpKSTG82THjk4l2',
    //     'my-table': '.styles__my-table__3uJig8mNpKSTG82THjk4l2',
    //     ...
    // };
    //
    // We need to grab these identifier, since we are interested in the keys,
    // these keys should be written out into a Typescript definition file.
    const match = /exports\.locals = (\{[\S\s]*\});/gm.exec(input);

    if (match && match.length) {

        // If we have a match then we grab the content of the export,
        // this should be parsable as JSON, from there we can process it.
        const exportLocalsString = match[1];
        const exportLocals = JSON.parse(exportLocalsString);
        const locals = {};

        // The keys from the CSS module are in "snake-case", however we want to
        // use "camelCase" variable names in our code. So, we convert the keys
        // to this format!
        for (const key in exportLocals) {
            if (exportLocals.hasOwnProperty(key)) {
                locals[camelCase(key)] = exportLocals[key];
            }
        }

        // Get the path for the definition file, this is relative to the currently loaded scss file... easy!
        const extension = path.extname(this.resourcePath);
        const definitionFile = this.resourcePath.replace(`${extension}`, `${extension}.d.ts`);
        const definitionFileContent = [
            '// *** This file is automatically generated - Do not edit! ***',
            '/* tslint:disable */',
            'interface ClassNames {',
            ...Object
                .keys(locals)
                .map(key => {
                    return `    readonly ${key}: string; // ${locals[key]}`;
                }),
            '}',
            'declare const styles: ClassNames;',
            'export default styles;'
        ];

        // Write the definition file, we do not use Webpack's emitFile() method, since
        // that would then track this output file as a dependency. We don't want this,
        // since these files are placed inside the source folder!
        fs.writeFileSync(
            definitionFile,
            definitionFileContent.join(os.EOL)
        );

        // Return the modified input value.
        return input.replace(
            /exports\.locals = \{[\S\s]*\};/gm,
            `exports.locals = ${JSON.stringify(locals)};`
        );
    }
    return input;
};
